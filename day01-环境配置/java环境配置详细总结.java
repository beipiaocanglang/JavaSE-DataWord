import sun.nio.ch.sctp.Shutdown;


****************day01-java环境配置***************

一、Java语言发展史(了解)
    詹姆斯·高斯林（James Gosling），被称之为JAVA之父。
    
    1983年获得了美国卡内基梅隆大学计算机科学博士学位，毕业后到IBM工作，设计IBM(服务器)第一代工作站NeWS系统，但不受重视。后来转至Sun公司，
    
    1990年，与Patrick，Naughton和Mike Sheridan等人合作“绿色计划”，后来发展一套语言叫做“Oak”，后改名为Java。

    JDK全称：Java Development Kit
    1.0.2
    1.1.1  1.1.6 > 1.1.7 > 1.1.8
    1.2.1

    Java 2 SDK
    1.2.2
    1.3.0  1.3.1
    1.4.0  1.4.1 > 1.4.2 > 1.5.0(5.0) > 1.6.0(6.0) 1.7.0(7.0)

    jdk8

    最长用的版本5、6、7

二、Java语言平台版本(了解)
    J2SE(Java 2 Platform Standard Edition)标准版(界面)
        是为开发普通桌面和商务应用程序提供的解决方案

        该技术体系是其他两者的基础，可以完成一些桌面应用程序的开发

    J2ME(Java 2 Platform Micro Edition)小型版(安卓，通过手机访问的)
        是为开发电子消费产品和嵌入式设备提供的解决方案

    J2EE(Java 2 Platform Enterprise Edition)企业版(网站，通过浏览器访问的)
        是为开发企业环境下的应用程序提供的一套解决方案
        该技术体系中包含的技术如 Servlet、Jsp等，主要针对于Web应用程序开发

    注意：
        SE是ME/EE的基础，想要学后两种必须先回第一种

        Java5.0版本前，叫 J2EE  J2SE  J2ME
        Java5.0版本后，更名为 JAVAEE  JAVASE  JAVAME

三、Java语言特点(熟知)
    1、特点：
        简单性		
        面向对象		
        分布式处理	
        健壮性		
        结构中立		
        *开源(开放源代码)
        *跨平台(跨操作系统)
        *多线程
        解释性
        高性能
        动态
        安全性

    2、跨平台性：
        2.1、什么是跨平台性？
            通过Java语言编写的应用程序在不同的系统平台上都可以运行。

        2.2、原理是什么？
            只要在需要运行java应用程序的操作系统上，
            先安装一个Java虚拟机(JVM Java Virtual Machine)即可。
            由JVM来负责Java程序在该系统中的运行。

        2.3、图解跨平台性
            见图1

            注意：
                Java语言是跨平台的，而JVM不是跨平台的。
                Java语言是通过JVM跨平台的
                JVM相当于翻译，想要和其他国家进行交流则需要翻译人员会对应国家的语言，针对不同的系统会有不同的JVM

四、JRE与JDK(掌握)
    1、JRE与JDK区别
        JRE(Java Runtime Environment：Java运行环境)
            包括Java虚拟机(JVM Java Virtual Machine)和Java程序所需的核心类库等，如果想要运行一个开发好的Java程序，计算机中只需要安装JRE即可。

        JDK(Java Development Kit：Java开发工具包)
            JDK是提供给Java开发人员使用的，其中包含了java的开发工具，也包括了JRE。所以安装了JDK，就不用在单独安装JRE了。
            其中包含的开发工具：编译工具(javac.exe)  打包工具(jar.exe)等
        
        为什么JDK中包含一个JRE呢？
            其一，开发完的程序，总需要运行一下看看效果。
            其二，也是最重要的，JDK中的开发工具其实都是java语言编写的应用程序，为了方便使用才打包成exe文件，
            如果没有JRE，那么这些工具是运行不了的。

        (1)作用
            JVM：保证Java语言跨平台
            JRE：Java程序的运行环境
            JDK：Java程序的开发环境

        (2)关系
            JDK：JRE+JAVA的开发工具
            JRE：JVM+类库

        *简单而言：
            使用JDK开发完成的java程序，交给JRE去运行，由JVM保证跨平台

    2、JDK的下载&&安装
        2.1、下载
            通过官方网站获取JDK：http://www.oracle.com
            
            注意：
                针对不同操作系统，下载不同的JDK版本

            下载步骤：
                见图2

        2.2、安装
            傻瓜式安装，下一步即可。
            
            建议：
                安装路径不要有中文或者特殊符号如空格等。最好目录统一。
                当提示安装JRE时，可以选择不安装(JDK包含JRE)。

五、入门案例
    1、开发工具介绍    
        notepad(微软操作系统自带)
        Notepad++
        Eclipse
        MyEclipse
        IntelliJ IDEA

    2、HelloWorld案例
        2.1、步骤：
            首先定义一个类(java程序是由最基本的单位类组成)：class 类名

            在类定义后加上一对大括号：{}
            
            在大括号中间添加一个主(main)方法/函数：public static void main(String [] args){ }

            在主方法的大括号中间添加一行输出语句：System.out.println(“hello world”);

        2.2、例如：
            class HelloWorld {
                public static void main(String [] args) {
                    System.out.println(“Hello World”);
                }
            }
            
    3、程序解析
        首先编写java源代码程序，扩展名.java
            
        在命令行模式中，输入javac命令对源代码进行编译，生成字节码文件：javac 源文件名.java
        
        编译完成后，如果没有报错信息，输入java命令对class字节码文件进行解释运行,执行时不需要添加.class扩展名：java HelloWorld

    4、运行与工作原理
        见图3

    5、常见错误
        (1)扩展名被隐藏
            如何找到：工具--文件夹选项--查看--去除隐藏扩展名的那个勾勾

        (2)我要求文件名称和类名一致。
            实际上不这样做也是可以的。
            但是，注意：
                javac后面跟的是文件名+扩展名
                java后面跟的类名不带扩展名

        (3)Java语言严格区分大小写，请注意。
            还有就是单词不要写错了。

        (4)见到非法字符: \65307肯定是中文问题。
            我们写程序要求标点符号必须全部是英文状态。

        (5)括号的配对问题。
            一般来说，括号都是成对出现的。

        (6)遇到
            在类 HelloWorld 中找不到主方法, 请将主方法定义为
            肯定是主方法的格式问题。

六、环境变量配置
    1、path环境变量配置的作用
        程序的执行需要使用外部指令javac，但是javac指令仅仅能在JDK安装目录下的bin目录下时候，因此程序只能写入bin目录

        实际程序开发过程中，不能将源代码写入JDK的安装目录，因此需要将源程序保存到任意位置的指定目录(英文目录)，所以需要使javac指令在任意目录下可以运行

        简单记：
            保证javac命令可以在任意目录下运行。

    2、path环境变量配置方式
        通过配置path环境变量，将javac指令所在目录也就是JDK安装目录下的bin目录配置到path变量下，即可使javac指令在任意目录下运行
        
        方式一：(删除和修改时不方便)
            win7,win8系统：
                右键点击桌面计算机→选择属性→选择高级系统设置→选择高级选项卡→点击环境变量→下方系统变量中查找path→双击path
            
            XP系统：
                右键点击桌面计算机→选择属性→选择高级选项卡→点击环境变量→下方系统变量中查找path→双击path
            
            将jdk安装目录下的bin目录添加到最左边并添加分号

        方式二：
            找到环境变量的位置，在系统变量里面
            新建：
                变量名：JAVA_HOME
                变量值：D:\develop\Java\jdk1.7.0_60
            修改：
                变量名：Path
                变量值：%JAVA_HOME%\bin;
            注意：
                path环境变量具有先后顺序

    3、classpath环境变量配置方式(了解 现在开发中不需要配置)
        创建新的变量名称：classpath
        
        值设定为指定的还有class文件的目录，多个目录间使用分号(;)分割(自定义用于存放编译后的class文件)
        
        作用：
            使classpath目录中的.class文件可以在任意目录运行
        
        技巧：
            通常将配置的目录最前面添加 . 配置，即便当前目录，使.class 文件搜索时首先搜索当前目录，
            
            然后根据目录配置的顺序依次查找，找到后即运行，因此classpath目录中的配置存在先后顺序

    4、path和classpath的区别
        (1)classpath环境变量的作用
            保证class文件可以在任意目录下运行

        (2)classpath环境变量的配置
            找到环境变量的位置，在系统变量里面
            新建：
                变量名：classpath
                变量值：E:\JavaSE\day01\code\HelloWorld案例


****************day02-java基础&数据类型***************
一、java基础
    1、关键字
        关键字概述：被Java语言赋予特定含义的单词
        
        关键字特点：组成关键字的字母全部小写
        
        关键字注意事项：
            goto和const作为保留字存在,目前并不使用，在JDK的新版本中可能提升为关键字

            类似Notepad++这样的高级记事本,针对关键字有特殊的颜色标记，非常直观

        关键字统计：(记住这些关键字就行  其他的自己拼写)
            见图1

            * 用于定义数据类型的关键字
                class、interface、byte、short
                int、long、float、double
                char、boolean、void

            * 用于定义数据类型值的关键字
                true、false、null

            * 用于定义流程控制的关键字
                if、else、switch、case
                default、while、do
                for、break、continue、return

            * 用于定义访问权限修饰符的关键字
                private、protected、public
                
            * 用于定义类，函数，变量修饰符的关键字
                abstract、final、static、synchronized
                
            * 用于定义类与类之间关系的关键字
                extends、implements
                
            * 用于定义建立实例及引用实例，判断实例的关键字
                new、this、super、instanceof
                
            * 用于异常处理的关键字
                try、catch、finally、throw、throws
                
            * 用于包的关键字
                package/import

            * 其他修饰符关键字
                native、strictfp、transient、volatile、assert

    2、标识符
        /**
         * 标识符概述：
         *      就是给类,接口,方法,变量等起名字时使用的字符序列
         *       
         * 要求规范组成规则(其他的也可以，只是不建议)：
         *      英文大小写字母
         *      数字字符
         *      $和_
         *       
         * 注意事项
         *      不能以数字开头
         *      不能是Java中的关键字
         *      区分大小写
         * 
         * 常见的命名规则：见名知意
         *      (1): 举例
         *           我要定义一个学生类
         *               class Student {}  可以
         *               class S{}         不可以   因不知  s  是什么
         *
         *      (2): 包：其实就是文件夹，用于把相同的类名进行区分，全部小写
         *           单级：liuyi
         *           多级：cn.itcast （.用于隔开文件夹）
         *               cn        （cn是文件夹）
         *               itcast    （cn下的又一个文件夹） 
         *
         *      (3): 类或者接口：
         *           一个单词：单词的首字母必须大写
         *              举例：Student,Dog
         * 
         *           多个单词：每个单词的首字母必须大写
         *              举例：HelloWorld,StudentName  
         *
         *      (4): 方法或者变量：
         *           一个单词：单词的首字母小写
         *              举例：main,age
         * 
         *           多个单词：从第二个单词开始，每个单词的首字母大写
         *              举例：studentAge,showAllNames()    
         *
         *      (5): 常量：
         *           一个单词：全部大写
         *               举例：PI
         * 
         *           多个单词：每个字母都大写(单词之间)用_隔开
         *              举例：STUDENT_MAX_AGE
         */
        class MakerNameDemo {
            public static void main(String[] arges) {
                int y = 100;
                //int 1y = 100;
                //int class = 100;
                int Class = 100;
        
                System.out.println("正确的标识符："+y);
                //System.out.println("以数字开头的标识符："+1y);
                //System.out.println("关键字的标识符："+class);
                System.out.println("区分大小写的标识符："+Class);
            }
        }

    3、注释
        定义：
            用于解释说明程序的文字
        
        注释的作用 
            A:解释说明程序，提高程序的阅读性
            B:可以帮助我们调试程序
        
        注释分类 
            单行注释：//
            多行注释：/*  */
            文档注释：/** 被javadoc工具解析生成一个说明书 */
            
        注意：
            多行注释和文档注释不可以嵌套使用，而单行是可以的

    4、常量、变量、进制
        4.1、常量
            /**
            *  常量概述
            *      在程序执行的过程中其值不可以发生改变
            *
            *  Java中常量分类
            *      字面值常量
            *      自定义常量
            *
            *  字面值常量
            *      (1): 字符串常量    用双引号括起来的内容(可以直接被输出的)
            *          举例："hello","world","HelloWorld"  
            *      
            *      (2): 整数常量      所有的整数(不用加双引号或单引号)
            *          举例：100,200
            *      
            *      (3): 小数常量      所有的小数(不用加双引号或单引号)
            *          举例：10.23,110.11
            *      
            *      (4): 字符常量      用单引号括起来的内容
            *          举例：'a','A','0'   （0 不是数字零、是字符零）
            *          错误的：'ab'
            *      
            *      (5): 布尔常量      比较特殊
            *          举例：true,false（真  假  ）
            *      
            *      (6): 空常量      
            *          举例：null
            */
            class ConstantDemo {
                public static void main(String[] args) {
                    //字符串常量
                    System.out.println("HelloWorld");
                    
                    //整数常量
                    System.out.println(100);
            
                    //小数常量
                    System.out.println(10.11);
            
                    //字符常量
                    System.out.println("j");
            
                    //布尔常量
                    System.out.println(true);
                    System.out.println(false);
            
                    //空常量
                    //System.out.println(null);
                }
            }
                
        4.2、进制
            Java针对整数常量提供了4种表现形式
                二进制
                八进制
                十进制
                十六进制

            进制概述：
                就是进位制，是人们规定的一种进位方法。 
                对于任何一种进制--X进制，就表示某一位置上的数运算时是逢X进一位。
                二进制就是逢二进一，
                八进制是逢八进一，
                十进制是逢十进一，
                十六进制是逢十六进一。
            
            进制组成：
                二进制：由0，1组成。以0b开头。
                
                八进制：由0,1,...7组成。以0开头。
                
                十进制：由0,1,...9组成。默认整数是十进制。
                
                十六进制：由0,1,...9,a,b,c,d,e,f(大小写均可)组成。以0x开头。
            
        4.3、变量
            1、定义
                在程序执行的过程中，在某个范围内 其值可以发生改变的量
                理解：如同数学中的未知数
            
            2、作用域 
                变量定义在哪个大括号内，它就在这个大括号内有效。并且，在同一个大括号内不能同时定义同名的变量。

            3、初始化值 
                没有初始化值的变量不能直接使用,你只要在使用前给值就行,不一定非要在定义的时候立即给值。推荐在定义的时候给值

            4、格式 
                格式1
                    数据类型 变量名 = 初始化值;
                格式2
                    数据类型 变量名;//定义变量
                    变量名 = 初始化值;//使用前给变量赋值

            5、注意 
                在一行上建议只定义一个变量；
                可以定义多个，但是不建议

二、数据类型
    1、定义 
        Java语言是强类型语言，对于每一种数据都定义了明确的具体数据类型，在内存总分配了不同大小的内存空间    
        
        注意：
            boolean类型不参与转换

    2、数据类型分类 
        2.1、基本数据类型
            数值型：
                整数类型：默认int
                    byte：占用存储空间：1字节、表数范围：-128 ~~ 127
                    short：占用存储空间：2字节、表数范围：-2^15 ~~ 2^15-1
                    int：占用存储空间：4字节、表数范围：-2^31 ~~ 2^31-1
                    long：占用存储空间：8字节、表数范围：-2^63 ~~ 2^63-1
                    备注：
                        声明long型常量必须在值后加 ‘l’ 或 ‘L’，否则会报错
                        long j = 1000000000000;//虽然定义的是long类型，但是整数型默认是int类型 所以还是会自动转换成int类型 但是int类型已经表示不了这个数值了，所以会报错
                        long j = 1000000000000L;//定义了long类型，加上了L  标识这是long类型，所以不会报错
                                    
                浮点类型：默认double
                    float：占用存储空间：4字节、表数范围：-3.403E38 ~~ 3.403E38
                    double：占用存储空间：8字节、表数范围：-1.798E308 ~~ 1.798E308
                    备注：
                        声明float型常量必须在值后加 ‘f’ 或 ‘F’，否则会报错
                        float f = 12.345;//默认会转成double类型(占用8个字节)，float占用4个字节，已经不能表示了  所以会损失精度
                        float f = 12.345F;//加上了F就标识了这是一个float类型
                        double f = 12.345;//正常不会报错

            字符型：
                char：占用存储空间：2字节
                备注：
                    char 型数据用来表示通常意义上的“字符”，字符常量为用单引号括起来的单个字符(不是字符串)
                    Java 字符采用 Unicode 编码，每个字符占两个字节，因而可用十六进制编码形式表示。注：Unicode是全球语言统一编码

            布尔型：
                boolean：占用存储空间：1字节、表数范围：true、false
                备注：
                    类型适于逻辑运算，一般用于程序流程控制。
                    boolean 类型数据只允许取值 true 或 false ，不可以 0 或非 0 的整数替代 true 和 false ，这点和C语言不同。

            注意：
                (0): Java基本数据类型有固定的表数范围和字段长度，其不受具体操作系统的影响，以保证Java程序的可移植性。

                (1): 整数默认是int类型
                
                (2): 浮点数默认是double类型。                        
                
                (3): 长整型后缀用L或者l标记。建议使用L。
                
                (4): 单精度浮点数用F或者f标记。建议使用F。                
                
                (5): boolean类型不能转换为其他的数据类型

                (6): 作用域	
                        变量定义在哪一级大括号中，哪个大括号的范围就是这个变量的作用域。相同的作用域中不能定义两个同名变量。

                (7): 初始化值
                    没有初始化值的变量不能直接使用
                    
                    在一行上建议只定义一个变量
                    
                    可以定义多个，但是不建议

        2.2、引用数据类型
            类：class

            接口：interface

            数组：[]
    
    3、类型默认转换
        /**
         * 类型转换
         *      一般我们在做比较的或运算的时候要求参与运算的数据类型必须一致，才有可操作性
         * 
         *      默认转换(从小到大的转换) 
         *          (1): byte,short,char ———> int ———> long ———> float ———> double
         *          (2): byte,short,char 相互之间不转换，他们参与运算首先转换为int类型
         *          注意：
         *              如果在运算中有byte,short,char类型的和int类型相运算则byte,short,char类型必然会先转成int类型然后再与int类型相运算(同理long—float—double)
         *              
         *              有long类型，其他的会先转成long再参与运算
         * 
         *              有float类型，其他的会先转成float再参与运算
         * 
         *              有double类型，其他的会先转成double再参与运算
         * 
         *              小的数据类型会先转成大的数据类型再与大的数据类型相加减
         * 见图4 类型转换
         */
        class DataTypeDemo1 {
            public static void main(String[] args) {
                /**
                 * int类型做加法运算 
                 *  3是整数类型
                 *  4是整数类型
                 * 整数类型做加法运算会直接相加
                 * 可以写成：
                 *      int a = 3;
                 *      int b = 4;
                 *      int c = a + b;//c=4
                 */ 
                System.out.println(3 + 4);//结果：7

                //定义一个byte类型，定义一个int类型  相加
                byte a = 5;
                int b = 6;

                //直接输出不会报错
                System.out.println(a + b);

                //大类型和小类型相加  转成小类型会报错 损失精度
                //byte c = a + b;
                //System.out.println(c);//错误: 不兼容的类型: 从int转换到byte可能会有损失

                //大类型和小类型相加  转成小类型会报错  正常相加
                int d = a+ b;
                System.out.println(d);//默认转换  小的会自动转换成大的数据类型
            }
        }

    4、类型强制转换 
        /**
         * 类型强制转换
         *      强制转换是从大的数据类型到小的数据类型。                    
         *      
         *      格式：
         *          目标数据类型 变量 = (目标数据类型) (被转换的数据);                
         *       
         *      注意：
         *          不要随意的去使用强制转换，因为它隐含了精度损失问题。   
         */
        class DataTypeDemo2 {
            public static void main(String[] args) {

                //定义一个byte类型，定义一个int类型  相加
                byte a = 5;
                int b = 6;

                //直接输出不会报错
                System.out.println("正常相加，默认转换：" + (a + b));

                //大类型和小类型相加  转成小类型会报错 损失精度 可以使用类型强制转换
                byte c = (byte)(a + b);
                System.out.println("正常相加，强制转换：" + c);//错误: 不兼容的类型: 从int转换到byte可能会有损失
            }
        }
    
    5、面试题
        
    










****************day01-运算符***************

****************day01-选择结构***************

****************day01-循环结构***************

****************day01-方法***************

****************day01-数组***************

****************day01-思考***************

****************day01-面向对象***************

****************day01-学习工具Eclipse的简介***************

****************day01-API讲解***************

****************day01-多线程***************

****************day01-设计模式***************

****************day01-GUI***************

****************day01-网络编程***************

****************day01-反射***************

****************day01-JDK5新特性***************














