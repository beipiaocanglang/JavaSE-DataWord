/**
 * 面试&思考
 *      1、请问下面这两个有没有问题
 *          double d = 12.345;
 *          float f = d;
 *      2、请问下面的两个有问题吗？如果让你选择 你会选择使用哪一个
 *          float f1 = (float)12.345;
 *          float f2 = 12.345F;
 *      3、面试题1
 *           byte b1=3,b2=4,b;
 *           b=b1+b2;
 *           b=3+4;
 *           哪句是编译失败的呢？为什么呢？
 *      4、面试题2
 *          byte b = 130;有没有问题?如果我想让赋值正确，可以怎么做?结果是多少呢?
 *          
 *  
 */
class DataTypeDemo3 {
	public static void main(String[] args) {

        /**
         * 请问下面这两个有没有问题
         * 有问题：
         *      浮点数默认是double类型，double类型大于float类型，编译时会出现损失精度的问题
         *      如果想要可以需要加强制转换
         */
        double d = 12.345;
        //float f = d;
        float f = (float)d;

        System.out.println(f);

        /**
         * 请问下面的两个有问题吗？如果让你选择 你会选择使用哪一个
         * 没有问题；结果都一样，
         *      第一种是double类型(浮点数默认double类型)使用了强制转换，可能会损失精度
         *      第二种直接定义了float类型不会损失精度
         * 如果要使用会选择第二种
         */
        float f1 = (float)12.345;
        float f2 = 12.345F;
        System.out.println(f1);
        System.out.println(f2);

        /**
         * 面试题1
         *      定义了三个变量byte b1=3; byte b2=4; byte b;   
         */
        byte b1 = 3, b2 = 4, b;

        //b1 是byte类型，b2是byte类型，b是byte类型，两个byte类型相加 首先会转成int类型 将int类型赋值给byte类型  会损失精度
        //b = b1 + b2;
        
        //3和4是常量，常量的计算是先把结果计算出来  看结果是否在byte类型的范围内  在就不报错
        b = 3 + 4;
        System.out.println(b);

        /**
         * 面试题2
         *  byte c = 130;有没有问题?如果我想让赋值正确，可以怎么做?结果是多少呢?
         */
        //有问题，byte的取值范围-128~127，130超出了取值范围 会损失精度
        //byte c = 130;
        
        /**
         * 可以解决，需要加强转  结果是-126
         * 分析过程：
         *   我们要想知道结果是什么，就应该知道是如何进行计算的。
         *   而我们又知道计算机中数据的运算都是补码进行的。
         *   而要得到补码，首先要计算出数据的二进制。
         *   
         *   A:获取130这个数据的二进制。
         *       00000000 00000000 00000000 10000010
         *       这是130的原码，也是反码，还是补码。
         *   B:做截取操作，截成byte类型的了。
         *       10000010 
         *       这个结果是补码。
         *   C:已知补码求原码。
         *               符号位		数值位
         *       补码：	1			0000010
         *       
         *       反码：	1			0000001
         *       
         *       原码：	1			1111110
         *      
         */
        byte e = (byte)130;
        System.out.println(e);
	}
}